"""
假设你正在爬楼梯。需要 n 阶你才能到达楼顶。

每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？

注意：给定 n 是一个正整数。

示例 1：

输入： 2
输出： 2
解释： 有两种方法可以爬到楼顶。
1.  1 阶 + 1 阶
2.  2 阶
示例 2：

输入： 3
输出： 3
解释： 有三种方法可以爬到楼顶。
1.  1 阶 + 1 阶 + 1 阶
2.  1 阶 + 2 阶
3.  2 阶 + 1 阶

"""

"""
解题关键，dp[i] = dp[i-2]+dp[i-1]
当前状态的值是由前一步和前两步状态的值相加得到。
"""
class Solution:
    def climbStairs(self, n: int) -> int:
        dp = []
        dp.append(1)    # n = 1的时候有一种方法
        dp.append(2)    # n = 2的时候有两种方法
        if n>2:
            for i in range(2, n):   # dp[i] = dp[i-2]+dp[i-1]
                dp.append(dp[i-1]+dp[i-2])
        return dp[n-1]